{"version":3,"file":"static/webpack/static/development/pages/jobs.js.5b53b8fa9ecba799e9c9.hot-update.js","sources":["webpack:///./pages/jobs/index.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withAuth } from \"../../hoc/withAuth\";\n\nimport * as actions from \"../../store/actions\";\nimport Router from \"next/router\";\nimport swal from \"sweetalert\";\nimport validator from \"validator\";\nimport Jobs from \"../../components/Jobs/Job\";\nimport EmptyCard from \"../../components/Jobs/EmptyCard\";\nimport JobCard from \"../../components/Jobs/JobCard\";\n\nconst linkJob = {\n  link: { value: \"\", isValid: true, message: \"\" },\n};\n\nconst JobsContainer = () => {\n  const dispatch = useDispatch();\n  const [linkjob, setLinkjob] = useState(linkJob);\n\n  const jobs = useSelector((state) => state.auth.user.jobs);\n  console.log(\"jobs ==> \", jobs);\n\n  const onJobScraping = useCallback(\n    (url_job) => dispatch(actions.jobScraping(url_job)),\n    [dispatch]\n  );\n  const onGetUser = useCallback(() => dispatch(actions.getUser()), [dispatch]);\n\n  useEffect(() => {\n    onGetUser();\n  }, [onGetUser]);\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    resetValidation();\n    if (linkIsValid()) {\n      onJobScraping(linkjob.link.value);\n    }\n  };\n\n  const linkChangeHandler = (event) => {\n    const data = {\n      ...linkjob,\n      link: { value: event.target.value, isValid: true, message: \"\" },\n    };\n    setLinkjob(data);\n  };\n\n  const clearLinkjobHandler = useCallback(() => {\n    const data = {\n      ...linkjob,\n      link: { value: \"\", isValid: true, message: \"\" },\n    };\n    setLinkjob(data);\n  }, [linkjob]);\n\n  const linkIsValid = () => {\n    const link = { ...linkjob.link };\n    let isGood = true;\n\n    if (validator.isEmpty(link.value, { ignore_whitespace: true })) {\n      link.isValid = false;\n      link.message = null;\n      link.isGood = false;\n      swal({\n        title: \"Upss not found!\",\n        text:\n          \"You can click button register it to make your job portal available.\",\n        icon: \"warning\",\n        buttons: [\"Cancel\", \"Register it\"],\n        dangerMode: true,\n      }).then((willDelete) => {\n        if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n      });\n    }\n    if (!isGood) {\n      setLinkjob(link);\n    }\n    return isGood;\n  };\n\n  const resetValidation = () => {\n    const state = JSON.parse(JSON.stringify(linkjob));\n    for (let key in state) {\n      if (state[key].hasOwnProperty(\"isValid\")) {\n        (state[key].isValid = true), (state[key].message = \"\");\n      }\n    }\n    setLinkjob(state);\n  };\n\n  let jobCard = <EmptyCard />;\n\n  return (\n    <Jobs\n      change={linkChangeHandler}\n      submit={submitHandler}\n      value={linkjob.link.value}\n      clearLink={clearLinkjobHandler}\n    >\n      {jobCard}\n    </Jobs>\n  );\n};\n\nJobsContainer.getInitialProps = (ctx) => {\n  ctx.store.dispatch(actions.getUser());\n};\n\nexport default withAuth(JobsContainer);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}