{"ast":null,"code":"var _jsxFileName = \"/Users/paulus/Desktop/automatch/pages/jobs/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useCallback } from \"react\";\nimport { withAuth } from \"../../hoc/withAuth\";\nimport Router from \"next/router\";\nimport swal from \"sweetalert\";\nimport validator from \"validator\";\nimport Jobs from \"../../components/Jobs/Job\";\nimport * as actions from \"../../store/actions\";\nconst linkJob = {\n  link: {\n    value: \"\",\n    isValid: true,\n    message: \"\"\n  }\n};\n\nconst JobsContainer = () => {\n  const dispatch = useDispatch();\n  const {\n    0: linkjob,\n    1: setLinkjob\n  } = useState(linkJob);\n  const onJobScraping = useCallback(url_job => dispatch(actions.jobScraping(url_job)), [dispatch]);\n\n  const submitHandler = event => {\n    event.preventDefault();\n    resetValidation();\n\n    if (linkIsValid()) {\n      onJobScraping(linkjob.link.value);\n    }\n  };\n\n  const linkChangeHandler = event => {\n    const data = _objectSpread({}, linkjob, {\n      link: {\n        value: event.target.value,\n        isValid: true,\n        message: \"\"\n      }\n    });\n\n    setLinkjob(data);\n  };\n\n  const clearLinkjobHandler = useCallback(() => {\n    const data = _objectSpread({}, linkjob, {\n      link: {\n        value: \"\",\n        isValid: true,\n        message: \"\"\n      }\n    });\n\n    setLinkjob(data);\n  }, [linkjob]);\n\n  const linkIsValid = () => {\n    const link = _objectSpread({}, linkjob.link);\n\n    let isGood = true;\n\n    if (validator.isEmpty(link.value, {\n      ignore_whitespace: true\n    })) {\n      link.isValid = false;\n      link.message = null;\n      link.isGood = false;\n      swal({\n        title: \"Upss not found!\",\n        text: \"You can click button register it to make your job portal available.\",\n        icon: \"warning\",\n        buttons: [\"Cancel\", \"Register it\"],\n        dangerMode: true\n      }).then(willDelete => {\n        if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n      });\n    }\n\n    if (!isGood) {\n      setLinkjob(link);\n    }\n\n    return isGood;\n  };\n\n  const resetValidation = () => {\n    const state = JSON.parse(JSON.stringify(linkjob));\n\n    for (let key in state) {\n      if (state[key].hasOwnProperty(\"isValid\")) {\n        state[key].isValid = true, state[key].message = \"\";\n      }\n    }\n\n    setLinkjob(state);\n  };\n\n  return __jsx(Jobs, {\n    change: linkChangeHandler,\n    submit: submitHandler,\n    value: linkjob.link.value,\n    clearLink: clearLinkjobHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  });\n};\n\nJobsContainer.getInitialProps = ctx => {\n  ctx.store.dispatch(actions.getUser());\n};\n\nexport default withAuth(JobsContainer);","map":{"version":3,"sources":["/Users/paulus/Desktop/automatch/pages/jobs/index.js"],"names":["useState","useCallback","withAuth","Router","swal","validator","Jobs","actions","linkJob","link","value","isValid","message","JobsContainer","dispatch","useDispatch","linkjob","setLinkjob","onJobScraping","url_job","jobScraping","submitHandler","event","preventDefault","resetValidation","linkIsValid","linkChangeHandler","data","target","clearLinkjobHandler","isGood","isEmpty","ignore_whitespace","title","text","icon","buttons","dangerMode","then","willDelete","push","state","JSON","parse","stringify","key","hasOwnProperty","getInitialProps","ctx","store","getUser"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { withAuth } from \"../../hoc/withAuth\";\n\nimport Router from \"next/router\";\nimport swal from \"sweetalert\";\nimport validator from \"validator\";\nimport Jobs from \"../../components/Jobs/Job\";\nimport * as actions from \"../../store/actions\";\n\nconst linkJob = {\n  link: { value: \"\", isValid: true, message: \"\" },\n};\n\nconst JobsContainer = () => {\n  const dispatch = useDispatch();\n  const [linkjob, setLinkjob] = useState(linkJob);\n\n  const onJobScraping = useCallback(\n    (url_job) => dispatch(actions.jobScraping(url_job)),\n    [dispatch]\n  );\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    resetValidation();\n    if (linkIsValid()) {\n      onJobScraping(linkjob.link.value);\n    }\n  };\n\n  const linkChangeHandler = (event) => {\n    const data = {\n      ...linkjob,\n      link: {\n        value: event.target.value,\n        isValid: true,\n        message: \"\",\n      },\n    };\n    setLinkjob(data);\n  };\n\n  const clearLinkjobHandler = useCallback(() => {\n    const data = {\n      ...linkjob,\n      link: {\n        value: \"\",\n        isValid: true,\n        message: \"\",\n      },\n    };\n    setLinkjob(data);\n  }, [linkjob]);\n\n  const linkIsValid = () => {\n    const link = { ...linkjob.link };\n    let isGood = true;\n\n    if (validator.isEmpty(link.value, { ignore_whitespace: true })) {\n      link.isValid = false;\n      link.message = null;\n      link.isGood = false;\n      swal({\n        title: \"Upss not found!\",\n        text:\n          \"You can click button register it to make your job portal available.\",\n        icon: \"warning\",\n        buttons: [\"Cancel\", \"Register it\"],\n        dangerMode: true,\n      }).then((willDelete) => {\n        if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n      });\n    }\n    if (!isGood) {\n      setLinkjob(link);\n    }\n    return isGood;\n  };\n\n  const resetValidation = () => {\n    const state = JSON.parse(JSON.stringify(linkjob));\n    for (let key in state) {\n      if (state[key].hasOwnProperty(\"isValid\")) {\n        (state[key].isValid = true), (state[key].message = \"\");\n      }\n    }\n    setLinkjob(state);\n  };\n\n  return (\n    <Jobs\n      change={linkChangeHandler}\n      submit={submitHandler}\n      value={linkjob.link.value}\n      clearLink={clearLinkjobHandler}\n    />\n  );\n};\n\nJobsContainer.getInitialProps = (ctx) => {\n  ctx.store.dispatch(actions.getUser());\n};\n\nexport default withAuth(JobsContainer);\n"]},"metadata":{},"sourceType":"module"}