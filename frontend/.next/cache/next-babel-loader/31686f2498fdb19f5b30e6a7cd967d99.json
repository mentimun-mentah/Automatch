{"ast":null,"code":"import * as actionType from \"./actionTypes\";\nimport { getUser } from \"./index\";\nimport Router from \"next/router\";\nimport axios from \"../axios-instance\";\nimport cookie from \"nookies\";\nimport swal from \"sweetalert\";\n/***JOB SCRAPING***/\n\nexport var jobScrapingStart = function jobScrapingStart() {\n  return {\n    type: actionType.JOB_SCRAPING_START\n  };\n};\nexport var jobScrapingSuccess = function jobScrapingSuccess() {\n  return {\n    type: actionType.JOB_SCRAPING_SUCCESS\n  };\n};\nexport var jobScrapingFail = function jobScrapingFail(error) {\n  return {\n    type: actionType.JOB_SCRAPING_FAIL,\n    error: error\n  };\n};\n/***JOB SCRAPING***/\n\n/***GET JOB***/\n\nexport var getJobStart = function getJobStart() {\n  return {\n    type: actionType.GET_JOB_START\n  };\n};\nexport var getJobSuccess = function getJobSuccess(jobData) {\n  return {\n    type: actionType.GET_JOB_SUCCESS,\n    jobData: jobData\n  };\n};\nexport var getJobFail = function getJobFail(error) {\n  return {\n    type: actionType.GET_JOB_FAIL,\n    error: error\n  };\n};\n/***GET JOB***/\n\nexport var jobScraping = function jobScraping(url_job, ctx) {\n  return function (dispatch) {\n    dispatch(getUser());\n    dispatch(jobScrapingStart());\n\n    var _cookie$get = cookie.get(ctx),\n        access_token = _cookie$get.access_token;\n\n    var link = {\n      url_job: url_job\n    };\n    var headerCfg = {\n      headers: {\n        Authorization: \"Bearer \".concat(access_token)\n      }\n    };\n    axios.post(\"/scrape-job\", link, headerCfg).then(function () {\n      dispatch(getUser());\n      console.log(\"getUser()\", getUser());\n      dispatch(jobScrapingSuccess());\n    })[\"catch\"](function (error) {\n      var status = error.response.status;\n      dispatch(jobScrapingFail(error.response.data));\n\n      if (status === 400) {\n        swal({\n          title: error.response.data.message,\n          text: \"\",\n          icon: \"error\",\n          button: \"Got it\",\n          dangerMode: true\n        });\n      }\n\n      if (error.response.data.message === \"Upss job portal not registerd yet.\") {\n        swal({\n          title: error.response.data.message,\n          text: \"Click register to make your job portal available.\",\n          icon: \"warning\",\n          buttons: [\"Cancel\", \"Register it\"],\n          dangerMode: true\n        }).then(function (willDelete) {\n          if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n        });\n      }\n\n      if (error.response.data.url_job) {\n        swal({\n          title: error.response.data.url_job[0],\n          text: \"\",\n          icon: \"error\",\n          button: \"Got it\",\n          dangerMode: true\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/paulus/Desktop/automatch/store/actions/jobs.js"],"names":["actionType","getUser","Router","axios","cookie","swal","jobScrapingStart","type","JOB_SCRAPING_START","jobScrapingSuccess","JOB_SCRAPING_SUCCESS","jobScrapingFail","error","JOB_SCRAPING_FAIL","getJobStart","GET_JOB_START","getJobSuccess","jobData","GET_JOB_SUCCESS","getJobFail","GET_JOB_FAIL","jobScraping","url_job","ctx","dispatch","get","access_token","link","headerCfg","headers","Authorization","post","then","console","log","status","response","data","title","message","text","icon","button","dangerMode","buttons","willDelete","push"],"mappings":"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","sourcesContent":["import * as actionType from \"./actionTypes\";\nimport { getUser } from \"./index\";\nimport Router from \"next/router\";\nimport axios from \"../axios-instance\";\nimport cookie from \"nookies\";\nimport swal from \"sweetalert\";\n\n/***JOB SCRAPING***/\nexport const jobScrapingStart = () => {\n  return {\n    type: actionType.JOB_SCRAPING_START,\n  };\n};\n\nexport const jobScrapingSuccess = () => {\n  return {\n    type: actionType.JOB_SCRAPING_SUCCESS,\n  };\n};\n\nexport const jobScrapingFail = (error) => {\n  return {\n    type: actionType.JOB_SCRAPING_FAIL,\n    error: error,\n  };\n};\n/***JOB SCRAPING***/\n\n/***GET JOB***/\nexport const getJobStart = () => {\n  return {\n    type: actionType.GET_JOB_START,\n  };\n};\n\nexport const getJobSuccess = (jobData) => {\n  return {\n    type: actionType.GET_JOB_SUCCESS,\n    jobData: jobData,\n  };\n};\n\nexport const getJobFail = (error) => {\n  return {\n    type: actionType.GET_JOB_FAIL,\n    error: error,\n  };\n};\n/***GET JOB***/\n\nexport const jobScraping = (url_job, ctx) => {\n  return (dispatch) => {\n    dispatch(getUser());\n    dispatch(jobScrapingStart());\n    const { access_token } = cookie.get(ctx);\n    const link = { url_job: url_job };\n    const headerCfg = {\n      headers: { Authorization: `Bearer ${access_token}` },\n    };\n    axios\n      .post(\"/scrape-job\", link, headerCfg)\n      .then(() => {\n        dispatch(getUser());\n        console.log(\"getUser()\", getUser());\n        dispatch(jobScrapingSuccess());\n      })\n      .catch((error) => {\n        const { status } = error.response;\n        dispatch(jobScrapingFail(error.response.data));\n        if (status === 400) {\n          swal({\n            title: error.response.data.message,\n            text: \"\",\n            icon: \"error\",\n            button: \"Got it\",\n            dangerMode: true,\n          });\n        }\n        if (\n          error.response.data.message === \"Upss job portal not registerd yet.\"\n        ) {\n          swal({\n            title: error.response.data.message,\n            text: \"Click register to make your job portal available.\",\n            icon: \"warning\",\n            buttons: [\"Cancel\", \"Register it\"],\n            dangerMode: true,\n          }).then((willDelete) => {\n            if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n          });\n        }\n        if (error.response.data.url_job) {\n          swal({\n            title: error.response.data.url_job[0],\n            text: \"\",\n            icon: \"error\",\n            button: \"Got it\",\n            dangerMode: true,\n          });\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}