{"ast":null,"code":"var _jsxFileName = \"/Users/paulus/Desktop/automatch/pages/jobs/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withAuth } from \"../../hoc/withAuth\";\nimport * as actions from \"../../store/actions\";\nimport Router from \"next/router\";\nimport swal from \"sweetalert\";\nimport validator from \"validator\";\nimport Jobs from \"../../components/Jobs/Job\";\nimport EmptyCard from \"../../components/Jobs/EmptyCard\";\nimport JobCard from \"../../components/Jobs/JobCard\";\nimport ScaleLoader from \"../../components/Transition/Spinner/ScaleLoader\";\nconst linkJob = {\n  link: {\n    value: \"\",\n    isValid: true,\n    message: \"\"\n  }\n};\n\nconst JobsContainer = () => {\n  const dispatch = useDispatch();\n  const {\n    0: linkjob,\n    1: setLinkjob\n  } = useState(linkJob);\n  const jobs = useSelector(state => state.auth.user);\n  const loading = useSelector(state => state.jobs.loading);\n  const onJobScraping = useCallback(url_job => dispatch(actions.jobScraping(url_job)), [dispatch]);\n\n  const submitHandler = event => {\n    event.preventDefault();\n    resetValidation();\n\n    if (linkIsValid()) {//onJobScraping(linkjob.link.value);\n      //clearLinkjobHandler();\n    }\n  };\n\n  const linkChangeHandler = event => {\n    const data = _objectSpread({}, linkjob, {\n      link: {\n        value: event.target.value,\n        isValid: true,\n        message: \"\"\n      }\n    });\n\n    setLinkjob(data);\n  };\n\n  const clearLinkjobHandler = useCallback(() => {\n    const data = _objectSpread({}, linkjob, {\n      link: {\n        value: \"\",\n        isValid: true,\n        message: \"\"\n      }\n    });\n\n    setLinkjob(data);\n  }, [linkjob]);\n\n  const linkIsValid = () => {\n    const link = _objectSpread({}, linkjob.link);\n\n    console.log(link.value);\n    let isGood = true;\n\n    if (validator.isEmpty(link.value)) {\n      link.isValid = false;\n      link.message = \"\";\n      link.isGood = false;\n      swal({\n        title: \"Upss not found!\",\n        text: \"You can click button register it to make your job portal available.\",\n        icon: \"warning\",\n        buttons: [\"Cancel\", \"Register it\"],\n        dangerMode: true\n      }).then(willDelete => {\n        if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n      });\n    }\n\n    if (!isGood) {\n      setLinkjob(link);\n    }\n\n    console.log(isGood);\n    return isGood;\n  };\n\n  const resetValidation = () => {\n    const state = JSON.parse(JSON.stringify(linkjob));\n\n    for (let key in state) {\n      if (state[key].hasOwnProperty(\"isValid\")) {\n        state[key].isValid = true, state[key].message = \"\";\n      }\n    }\n\n    setLinkjob(state);\n  };\n\n  let jobCard = __jsx(EmptyCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  });\n\n  if (jobs !== null && jobs.jobs !== undefined && jobs.jobs.length > 0) {\n    jobCard = __jsx(\"div\", {\n      className: \"row row-cols-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, jobs.jobs.map((job, i) => {\n      const {\n        image,\n        company,\n        location,\n        title_job,\n        posted,\n        id\n      } = job;\n      return __jsx(JobCard, {\n        key: i,\n        image: image,\n        company: company,\n        location: location,\n        title_job: title_job,\n        posted: posted,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n  let submitLink = null;\n\n  if (loading) {\n    submitLink = __jsx(ScaleLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 18\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, null, submitLink, __jsx(Jobs, {\n    change: linkChangeHandler,\n    submit: submitHandler,\n    value: linkjob.link.value,\n    clearLink: clearLinkjobHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, jobCard));\n};\n\nexport default withAuth(JobsContainer);","map":{"version":3,"sources":["/Users/paulus/Desktop/automatch/pages/jobs/index.js"],"names":["useState","useCallback","useDispatch","useSelector","withAuth","actions","Router","swal","validator","Jobs","EmptyCard","JobCard","ScaleLoader","linkJob","link","value","isValid","message","JobsContainer","dispatch","linkjob","setLinkjob","jobs","state","auth","user","loading","onJobScraping","url_job","jobScraping","submitHandler","event","preventDefault","resetValidation","linkIsValid","linkChangeHandler","data","target","clearLinkjobHandler","console","log","isGood","isEmpty","title","text","icon","buttons","dangerMode","then","willDelete","push","JSON","parse","stringify","key","hasOwnProperty","jobCard","undefined","length","map","job","i","image","company","location","title_job","posted","id","submitLink"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withAuth } from \"../../hoc/withAuth\";\n\nimport * as actions from \"../../store/actions\";\nimport Router from \"next/router\";\nimport swal from \"sweetalert\";\nimport validator from \"validator\";\nimport Jobs from \"../../components/Jobs/Job\";\nimport EmptyCard from \"../../components/Jobs/EmptyCard\";\nimport JobCard from \"../../components/Jobs/JobCard\";\nimport ScaleLoader from \"../../components/Transition/Spinner/ScaleLoader\";\n\nconst linkJob = {\n  link: { value: \"\", isValid: true, message: \"\" },\n};\n\nconst JobsContainer = () => {\n  const dispatch = useDispatch();\n  const [linkjob, setLinkjob] = useState(linkJob);\n\n  const jobs = useSelector((state) => state.auth.user);\n  const loading = useSelector((state) => state.jobs.loading);\n\n  const onJobScraping = useCallback(\n    (url_job) => dispatch(actions.jobScraping(url_job)),\n    [dispatch]\n  );\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    resetValidation();\n    if (linkIsValid()) {\n      //onJobScraping(linkjob.link.value);\n      //clearLinkjobHandler();\n    }\n  };\n\n  const linkChangeHandler = (event) => {\n    const data = {\n      ...linkjob,\n      link: { value: event.target.value, isValid: true, message: \"\" },\n    };\n    setLinkjob(data);\n  };\n\n  const clearLinkjobHandler = useCallback(() => {\n    const data = {\n      ...linkjob,\n      link: { value: \"\", isValid: true, message: \"\" },\n    };\n    setLinkjob(data);\n  }, [linkjob]);\n\n  const linkIsValid = () => {\n    const link = { ...linkjob.link };\n    console.log(link.value);\n\n    let isGood = true;\n\n    if (validator.isEmpty(link.value)) {\n      link.isValid = false;\n      link.message = \"\";\n      link.isGood = false;\n      swal({\n        title: \"Upss not found!\",\n        text:\n          \"You can click button register it to make your job portal available.\",\n        icon: \"warning\",\n        buttons: [\"Cancel\", \"Register it\"],\n        dangerMode: true,\n      }).then((willDelete) => {\n        if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n      });\n    }\n    if (!isGood) {\n      setLinkjob(link);\n    }\n    console.log(isGood);\n    return isGood;\n  };\n\n  const resetValidation = () => {\n    const state = JSON.parse(JSON.stringify(linkjob));\n    for (let key in state) {\n      if (state[key].hasOwnProperty(\"isValid\")) {\n        (state[key].isValid = true), (state[key].message = \"\");\n      }\n    }\n    setLinkjob(state);\n  };\n\n  let jobCard = <EmptyCard />;\n  if (jobs !== null && jobs.jobs !== undefined && jobs.jobs.length > 0) {\n    jobCard = (\n      <div className=\"row row-cols-5\">\n        {jobs.jobs.map((job, i) => {\n          const { image, company, location, title_job, posted, id } = job;\n          return (\n            <JobCard\n              key={i}\n              image={image}\n              company={company}\n              location={location}\n              title_job={title_job}\n              posted={posted}\n              id={id}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  let submitLink = null;\n  if (loading) {\n    submitLink = <ScaleLoader />;\n  }\n\n  return (\n    <>\n      {submitLink}\n      <Jobs\n        change={linkChangeHandler}\n        submit={submitHandler}\n        value={linkjob.link.value}\n        clearLink={clearLinkjobHandler}\n      >\n        {jobCard}\n      </Jobs>\n    </>\n  );\n};\n\nexport default withAuth(JobsContainer);\n"]},"metadata":{},"sourceType":"module"}