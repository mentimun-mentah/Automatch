{"ast":null,"code":"import * as actionType from \"./actionTypes\";\nimport { getUser } from \"./index\";\nimport Router from \"next/router\";\nimport axios from \"../axios-instance\";\nimport cookie from \"nookies\";\nimport swal from \"sweetalert\";\n/***JOB SCRAPING***/\n\nexport const jobScrapingStart = () => {\n  return {\n    type: actionType.JOB_SCRAPING_START\n  };\n};\nexport const jobScrapingSuccess = user => {\n  return {\n    type: actionType.JOB_SCRAPING_SUCCESS,\n    user: user\n  };\n};\nexport const jobScrapingFail = error => {\n  return {\n    type: actionType.JOB_SCRAPING_FAIL,\n    error: error\n  };\n};\n/***JOB SCRAPING***/\n\n/***GET JOB***/\n\nexport const getJobStart = () => {\n  return {\n    type: actionType.GET_JOB_START\n  };\n};\nexport const getJobSuccess = jobData => {\n  return {\n    type: actionType.GET_JOB_SUCCESS,\n    jobData: jobData\n  };\n};\nexport const getJobFail = error => {\n  return {\n    type: actionType.GET_JOB_FAIL,\n    error: error\n  };\n};\n/***GET JOB***/\n\nexport const jobScraping = (url_job, ctx) => {\n  return dispatch => {\n    dispatch(getUser());\n    dispatch(jobScrapingStart());\n    const {\n      access_token\n    } = cookie.get(ctx);\n    const link = {\n      url_job: url_job\n    };\n    const headerCfg = {\n      headers: {\n        Authorization: `Bearer ${access_token}`\n      }\n    };\n    axios.post(\"/scrape-job\", link, headerCfg).then(() => {\n      dispatch(getUser());\n      dispatch(jobScrapingSuccess());\n    }).catch(error => {\n      const {\n        status\n      } = error.response;\n      dispatch(jobScrapingFail(error.response.data));\n\n      if (status === 400) {\n        swal({\n          title: error.response.data.message,\n          text: \"\",\n          icon: \"error\",\n          button: \"Got it\",\n          dangerMode: true\n        });\n      }\n\n      if (error.response.data.message === \"Upss job portal not registerd yet.\") {\n        swal({\n          title: error.response.data.message,\n          text: \"Click register to make your job portal available.\",\n          icon: \"warning\",\n          buttons: [\"Cancel\", \"Register it\"],\n          dangerMode: true\n        }).then(willDelete => {\n          if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n        });\n      }\n\n      if (error.response.data.url_job) {\n        swal({\n          title: error.response.data.url_job[0],\n          text: \"\",\n          icon: \"error\",\n          button: \"Got it\",\n          dangerMode: true\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/paulus/Desktop/automatch/store/actions/jobs.js"],"names":["actionType","getUser","Router","axios","cookie","swal","jobScrapingStart","type","JOB_SCRAPING_START","jobScrapingSuccess","user","JOB_SCRAPING_SUCCESS","jobScrapingFail","error","JOB_SCRAPING_FAIL","getJobStart","GET_JOB_START","getJobSuccess","jobData","GET_JOB_SUCCESS","getJobFail","GET_JOB_FAIL","jobScraping","url_job","ctx","dispatch","access_token","get","link","headerCfg","headers","Authorization","post","then","catch","status","response","data","title","message","text","icon","button","dangerMode","buttons","willDelete","push"],"mappings":"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","sourcesContent":["import * as actionType from \"./actionTypes\";\nimport { getUser } from \"./index\";\nimport Router from \"next/router\";\nimport axios from \"../axios-instance\";\nimport cookie from \"nookies\";\nimport swal from \"sweetalert\";\n\n/***JOB SCRAPING***/\nexport const jobScrapingStart = () => {\n  return {\n    type: actionType.JOB_SCRAPING_START,\n  };\n};\n\nexport const jobScrapingSuccess = (user) => {\n  return {\n    type: actionType.JOB_SCRAPING_SUCCESS,\n    user: user,\n  };\n};\n\nexport const jobScrapingFail = (error) => {\n  return {\n    type: actionType.JOB_SCRAPING_FAIL,\n    error: error,\n  };\n};\n/***JOB SCRAPING***/\n\n/***GET JOB***/\nexport const getJobStart = () => {\n  return {\n    type: actionType.GET_JOB_START,\n  };\n};\n\nexport const getJobSuccess = (jobData) => {\n  return {\n    type: actionType.GET_JOB_SUCCESS,\n    jobData: jobData,\n  };\n};\n\nexport const getJobFail = (error) => {\n  return {\n    type: actionType.GET_JOB_FAIL,\n    error: error,\n  };\n};\n/***GET JOB***/\n\nexport const jobScraping = (url_job, ctx) => {\n  return (dispatch) => {\n    dispatch(getUser());\n    dispatch(jobScrapingStart());\n    const { access_token } = cookie.get(ctx);\n    const link = { url_job: url_job };\n    const headerCfg = {\n      headers: { Authorization: `Bearer ${access_token}` },\n    };\n    axios\n      .post(\"/scrape-job\", link, headerCfg)\n      .then(() => {\n        dispatch(getUser());\n        dispatch(jobScrapingSuccess());\n      })\n      .catch((error) => {\n        const { status } = error.response;\n        dispatch(jobScrapingFail(error.response.data));\n        if (status === 400) {\n          swal({\n            title: error.response.data.message,\n            text: \"\",\n            icon: \"error\",\n            button: \"Got it\",\n            dangerMode: true,\n          });\n        }\n        if (\n          error.response.data.message === \"Upss job portal not registerd yet.\"\n        ) {\n          swal({\n            title: error.response.data.message,\n            text: \"Click register to make your job portal available.\",\n            icon: \"warning\",\n            buttons: [\"Cancel\", \"Register it\"],\n            dangerMode: true,\n          }).then((willDelete) => {\n            if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n          });\n        }\n        if (error.response.data.url_job) {\n          swal({\n            title: error.response.data.url_job[0],\n            text: \"\",\n            icon: \"error\",\n            button: \"Got it\",\n            dangerMode: true,\n          });\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}