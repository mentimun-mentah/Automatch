{"ast":null,"code":"import * as actionType from \"./actionTypes\";\nimport { getUser } from \"./index\";\nimport Router from \"next/router\";\nimport axios from \"../axios-instance\";\nimport cookie from \"nookies\";\nimport swal from \"sweetalert\";\n/***JOB SCRAPING***/\n\nexport const jobScrapingStart = () => {\n  return {\n    type: actionType.JOB_SCRAPING_START\n  };\n};\nexport const jobScrapingSuccess = user => {\n  return {\n    type: actionType.JOB_SCRAPING_SUCCESS,\n    user: user\n  };\n};\nexport const jobScrapingFail = error => {\n  return {\n    type: actionType.JOB_SCRAPING_FAIL,\n    error: error\n  };\n};\n/***JOB SCRAPING***/\n\nexport const jobScraping = (url_job, ctx) => {\n  return dispatch => {\n    dispatch(getUser());\n    dispatch(jobScrapingStart());\n    const {\n      access_token\n    } = cookie.get(ctx);\n    const link = {\n      url_job: url_job\n    };\n    const headerCfg = {\n      headers: {\n        Authorization: `Bearer ${access_token}`\n      }\n    };\n    axios.post(\"/scrape-job\", link, headerCfg).then(res => {\n      console.log(res.data);\n      dispatch(getUser());\n      dispatch(jobScrapingSuccess());\n    }).catch(error => {\n      console.log(error.response);\n      dispatch(jobScrapingFail(error.response.data));\n\n      if (error.response.data.message) {\n        swal({\n          title: error.response.data.message,\n          text: \"Click register to make your job portal available.\",\n          icon: \"warning\",\n          buttons: [\"Cancel\", \"Register it\"],\n          dangerMode: true\n        }).then(willDelete => {\n          if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n        });\n      }\n\n      if (error.response.data.url_job) {\n        swal({\n          title: error.response.data.url_job[0],\n          text: \"\",\n          icon: \"error\",\n          button: \"Got it\",\n          dangerMode: true\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/paulus/Desktop/automatch/store/actions/jobs.js"],"names":["actionType","getUser","Router","axios","cookie","swal","jobScrapingStart","type","JOB_SCRAPING_START","jobScrapingSuccess","user","JOB_SCRAPING_SUCCESS","jobScrapingFail","error","JOB_SCRAPING_FAIL","jobScraping","url_job","ctx","dispatch","access_token","get","link","headerCfg","headers","Authorization","post","then","res","console","log","data","catch","response","message","title","text","icon","buttons","dangerMode","willDelete","push","button"],"mappings":"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","sourcesContent":["import * as actionType from \"./actionTypes\";\nimport { getUser } from \"./index\";\nimport Router from \"next/router\";\nimport axios from \"../axios-instance\";\nimport cookie from \"nookies\";\nimport swal from \"sweetalert\";\n\n/***JOB SCRAPING***/\nexport const jobScrapingStart = () => {\n  return {\n    type: actionType.JOB_SCRAPING_START,\n  };\n};\n\nexport const jobScrapingSuccess = (user) => {\n  return {\n    type: actionType.JOB_SCRAPING_SUCCESS,\n    user: user,\n  };\n};\n\nexport const jobScrapingFail = (error) => {\n  return {\n    type: actionType.JOB_SCRAPING_FAIL,\n    error: error,\n  };\n};\n/***JOB SCRAPING***/\n\nexport const jobScraping = (url_job, ctx) => {\n  return (dispatch) => {\n    dispatch(getUser());\n    dispatch(jobScrapingStart());\n    const { access_token } = cookie.get(ctx);\n    const link = { url_job: url_job };\n    const headerCfg = {\n      headers: { Authorization: `Bearer ${access_token}` },\n    };\n    axios\n      .post(\"/scrape-job\", link, headerCfg)\n      .then((res) => {\n        console.log(res.data);\n        dispatch(getUser());\n        dispatch(jobScrapingSuccess());\n      })\n      .catch((error) => {\n        console.log(error.response);\n        dispatch(jobScrapingFail(error.response.data));\n        if (error.response.data.message) {\n          swal({\n            title: error.response.data.message,\n            text: \"Click register to make your job portal available.\",\n            icon: \"warning\",\n            buttons: [\"Cancel\", \"Register it\"],\n            dangerMode: true,\n          }).then((willDelete) => {\n            if (willDelete) Router.push(\"/job-portal\", \"/job-portal\");\n          });\n        }\n        if (error.response.data.url_job) {\n          swal({\n            title: error.response.data.url_job[0],\n            text: \"\",\n            icon: \"error\",\n            button: \"Got it\",\n            dangerMode: true,\n          });\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}